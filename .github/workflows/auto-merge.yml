name: Auto Merge

on:
  workflow_run:
    workflows: ["PR Metadata Validation"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request'
    steps:
            - name: Get PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            console.log('=== Workflow Run Event Debug ===');
            console.log('Event name:', context.eventName);
            console.log('Action:', context.payload.action);
            console.log('Workflow run ID:', context.payload.workflow_run?.id);
            console.log('Head branch:', context.payload.workflow_run?.head_branch);
            console.log('Head SHA:', context.payload.workflow_run?.head_sha);
            console.log('Repository:', context.payload.workflow_run?.head_repository?.full_name);

            // workflow_run에서 PR 정보 직접 가져오기
            const workflowRun = context.payload.workflow_run;

            if (!workflowRun) {
              console.log('❌ No workflow_run data available');
              return null;
            }

            // PR 리스트 가져오기
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            console.log(`📋 Found ${pulls.length} open PRs`);

            // 모든 PR 정보 로깅
            for (const pr of pulls) {
              console.log(`PR #${pr.number}: "${pr.title}"`);
              console.log(`  - Head ref: ${pr.head.ref}`);
              console.log(`  - Head SHA: ${pr.head.sha}`);
              console.log(`  - Base ref: ${pr.base.ref}`);
            }

            // 여러 조건으로 PR 찾기
            let matchingPr = null;

            // 1. SHA로 먼저 찾기
            matchingPr = pulls.find(pr => pr.head.sha === workflowRun.head_sha);
            if (matchingPr) {
              console.log(`✅ Found PR by SHA: #${matchingPr.number}`);
            }

            // 2. 브랜치명으로 찾기
            if (!matchingPr) {
              matchingPr = pulls.find(pr => pr.head.ref === workflowRun.head_branch);
              if (matchingPr) {
                console.log(`✅ Found PR by branch: #${matchingPr.number}`);
              }
            }

            // 3. 부분 브랜치명 매칭 (agenda-XXX 패턴)
            if (!matchingPr && workflowRun.head_branch) {
              matchingPr = pulls.find(pr =>
                pr.head.ref.includes(workflowRun.head_branch) ||
                workflowRun.head_branch.includes(pr.head.ref)
              );
              if (matchingPr) {
                console.log(`✅ Found PR by partial branch match: #${matchingPr.number}`);
              }
            }

            if (!matchingPr) {
              console.log('❌ No matching PR found');
              console.log('Available PRs:', pulls.map(pr => `#${pr.number} (${pr.head.ref})`));
              return null;
            }

            console.log(`🎯 Final match: PR #${matchingPr.number}: "${matchingPr.title}"`);

            // Agenda PR인지 확인
            if (!matchingPr.title.match(/^\[Agenda( Update)?\] (mainnet|sepolia) - [0-9]+ - .+/)) {
              console.log('⚠️ PR title does not match agenda format, skipping auto-merge');
              console.log('Expected format: [Agenda] <network> - <id> - <title>');
              return null;
            }

            console.log('✅ PR title matches agenda format');
            return matchingPr.number;

      - name: Auto-merge PR
        if: steps.pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.result }};

            if (!prNumber) {
              console.log('No PR to merge');
              return;
            }

            console.log(`🚀 Auto-merging PR #${prNumber}...`);

            try {
              // PR 상태 확인
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              if (pr.state !== 'open') {
                console.log(`PR #${prNumber} is not open (state: ${pr.state})`);
                return;
              }

              if (pr.draft) {
                console.log(`PR #${prNumber} is in draft state`);
                return;
              }

              // 자동 머지 시도
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                commit_title: `Auto-merge: ${pr.title}`,
                commit_message: `✅ Auto-merged after successful validation\n\nAll checks passed:\n- Schema validation\n- Format validation\n- PR title validation\n- Time validation\n- Signature validation\n- Transaction validation`,
                merge_method: "squash"
              });

              console.log(`✅ PR #${prNumber} successfully auto-merged!`);

              // 성공 댓글
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `🎉 **Auto-merge successful!**\n\nThis PR has been automatically merged after all validations passed.\n\n✅ All checks completed successfully\n\nThank you for your contribution! 🚀`
              });

            } catch (error) {
              console.log(`❌ Auto-merge failed: ${error.message}`);

              // 실패 댓글
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `⚠️ **Auto-merge failed**\n\n**Reason**: ${error.message}\n\n✅ **All validations passed** - The PR is ready for manual merge!\n\nPlease merge manually when ready.`
              });
            }