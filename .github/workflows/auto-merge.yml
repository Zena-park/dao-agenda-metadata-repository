name: Auto Merge

on:
  workflow_run:
    workflows: ["PR Metadata Validation"]
    types:
      - completed

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Get PR number
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
              state: 'open'
            });

            if (pulls.length === 0) {
              console.log('No open PR found for this branch');
              return null;
            }

            const pr = pulls[0];
            console.log(`Found PR #${pr.number}: ${pr.title}`);

            // Agenda PR인지 확인
            if (!pr.title.match(/^\[Agenda( Update)?\] (mainnet|sepolia) - [0-9]+ - .+/)) {
              console.log('PR title does not match agenda format, skipping auto-merge');
              return null;
            }

            return pr.number;

      - name: Auto-merge PR
        if: steps.pr.outputs.result != 'null'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr.outputs.result }};

            if (!prNumber) {
              console.log('No PR to merge');
              return;
            }

            console.log(`🚀 Auto-merging PR #${prNumber}...`);

            try {
              // PR 상태 확인
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              if (pr.state !== 'open') {
                console.log(`PR #${prNumber} is not open (state: ${pr.state})`);
                return;
              }

              if (pr.draft) {
                console.log(`PR #${prNumber} is in draft state`);
                return;
              }

              // 자동 머지 시도
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                commit_title: `Auto-merge: ${pr.title}`,
                commit_message: `✅ Auto-merged after successful validation\n\nAll checks passed:\n- Schema validation\n- Format validation\n- PR title validation\n- Time validation\n- Signature validation\n- Transaction validation`,
                merge_method: "squash"
              });

              console.log(`✅ PR #${prNumber} successfully auto-merged!`);

              // 성공 댓글
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `🎉 **Auto-merge successful!**\n\nThis PR has been automatically merged after all validations passed.\n\n✅ All checks completed successfully\n\nThank you for your contribution! 🚀`
              });

            } catch (error) {
              console.log(`❌ Auto-merge failed: ${error.message}`);

              // 실패 댓글
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `⚠️ **Auto-merge failed**\n\n**Reason**: ${error.message}\n\n✅ **All validations passed** - The PR is ready for manual merge!\n\nPlease merge manually when ready.`
              });
            }